{
	"info": {
		"_postman_id": "da4b1015-2235-49aa-9b12-8a88061b152b",
		"name": "Fake Store API - Cart Endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38342470",
		"_collection_link": "https://ittb55.postman.co/workspace/Fake-Store-API---Cart-Endpoints~dec773dc-4b53-44ec-bebd-6c44b48984a1/collection/38342470-da4b1015-2235-49aa-9b12-8a88061b152b?action=share&source=collection_link&creator=38342470"
	},
	"item": [
		{
			"name": "Fetch All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is text/html\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the response body is a valid HTML format\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('<html>').and.to.include('</html>');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check for any additional headers in the response\", function () {\r",
							"    const headers = pm.response.headers;\r",
							"    \r",
							"    // Check if there are any additional headers present\r",
							"    pm.expect(headers).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is in a valid JSON format\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the presence of required properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('title');\r",
							"        pm.expect(item).to.have.property('price');\r",
							"        pm.expect(item).to.have.property('description');\r",
							"        pm.expect(item).to.have.property('category');\r",
							"        pm.expect(item).to.have.property('image');\r",
							"        pm.expect(item).to.have.property('rating').to.be.an('object');\r",
							"        pm.expect(item.rating).to.have.property('rate');\r",
							"        pm.expect(item.rating).to.have.property('count');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(product) {\r",
							"        pm.expect(product.price).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that rating.rate is a number between 0 and 5\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(product) {\r",
							"        pm.expect(product.rating.rate).to.be.a('number');\r",
							"        pm.expect(product.rating.rate).to.be.within(0, 5);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://fakestoreapi.com/products",
					"protocol": "https",
					"host": [
						"fakestoreapi",
						"com"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Carts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(cart) {\r",
							"        pm.expect(cart).to.include.all.keys('id', 'userId', 'date', 'products', '__v');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Date is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(cart) {\r",
							"        pm.expect(cart.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Products array is present and contains expected number of elements\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(cart) {\r",
							"    pm.expect(cart.products).to.exist;\r",
							"    pm.expect(cart.products).to.be.an('array');\r",
							"    // Add more specific checks for the expected number of elements in the products array if needed\r",
							"  });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://fakestoreapi.com/carts",
					"protocol": "https",
					"host": [
						"fakestoreapi",
						"com"
					],
					"path": [
						"carts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Single Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema includes required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.include.all.keys('id', 'userId', 'date', 'products', '__v');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://fakestoreapi.com/carts/5\n",
					"protocol": "https",
					"host": [
						"fakestoreapi",
						"com"
					],
					"path": [
						"carts",
						"5\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Limit Results",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema contains id, userId, date, products, and __v\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(cart) {\r",
							"        pm.expect(cart).to.have.property('id');\r",
							"        pm.expect(cart).to.have.property('userId');\r",
							"        pm.expect(cart).to.have.property('date');\r",
							"        pm.expect(cart).to.have.property('products');\r",
							"        pm.expect(cart).to.have.property('__v');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://fakestoreapi.com/carts?limit=5",
					"protocol": "https",
					"host": [
						"fakestoreapi",
						"com"
					],
					"path": [
						"carts"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sort Results",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be sorted in descending order by date\", function () {\r",
							"    pm.response.to.be.json;\r",
							"    const carts = pm.response.json();\r",
							"    const dates = carts.map(cart => cart.date);\r",
							"    const sortedDates = [...dates].sort((a, b) => new Date(b) - new Date(a));\r",
							"    pm.expect(dates).to.eql(sortedDates);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://fakestoreapi.com/carts?sort=desc",
					"protocol": "https",
					"host": [
						"fakestoreapi",
						"com"
					],
					"path": [
						"carts"
					],
					"query": [
						{
							"key": "sort",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Carts in a Date Range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each cart's date should be within the specified range\", function () {\r",
							"    const carts = pm.response.json();\r",
							"    carts.forEach(function(cart) {\r",
							"        const cartDate = new Date(cart.date);\r",
							"        pm.expect(cartDate).to.be.within(new Date(\"2019-12-10\"), new Date(\"2020-10-10\"));\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://fakestoreapi.com/carts?startdate=2019-12-10&enddate=2020-10-10",
					"protocol": "https",
					"host": [
						"fakestoreapi",
						"com"
					],
					"path": [
						"carts"
					],
					"query": [
						{
							"key": "startdate",
							"value": "2019-12-10"
						},
						{
							"key": "enddate",
							"value": "2020-10-10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Carts for a Specific User",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://fakestoreapi.com/carts/user/2\n",
					"protocol": "https",
					"host": [
						"fakestoreapi",
						"com"
					],
					"path": [
						"carts",
						"user",
						"2\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a New Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain the cart id, userId, and products\", function () {\r",
							"    const cart = pm.response.json();\r",
							"    pm.expect(cart).to.have.property(\"id\");\r",
							"    pm.expect(cart).to.have.property(\"userId\", 5);\r",
							"    pm.expect(cart).to.have.property(\"products\").that.is.an('array');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": 5,\r\n  \"date\": \"2020-02-03\",\r\n  \"products\": [\r\n    {\"productId\": 5, \"quantity\": 1},\r\n    {\"productId\": 1, \"quantity\": 5}\r\n  ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://fakestoreapi.com/carts",
					"protocol": "https",
					"host": [
						"fakestoreapi",
						"com"
					],
					"path": [
						"carts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a Cart",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": 3,\r\n  \"date\": \"2019-12-10\",\r\n  \"products\": [\r\n    {\"productId\": 1, \"quantity\": 3}\r\n  ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://fakestoreapi.com/carts/3",
					"protocol": "https",
					"host": [
						"fakestoreapi",
						"com"
					],
					"path": [
						"carts",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and userId fields must exist and be of type number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.userId).to.exist.and.to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Date field is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Products array is present and contains expected number of elements\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.products).to.exist.and.to.be.an('array');\r",
							"  pm.expect(responseData.products).to.have.lengthOf(1); // Assuming the expected number of elements is 1\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Products array should contain non-negative integers for productId and quantity\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.products).to.be.an('array');\r",
							"    responseData.products.forEach(function(product) {\r",
							"        pm.expect(product.productId).to.be.a('number').and.to.be.at.least(0);\r",
							"        pm.expect(product.quantity).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://fakestoreapi.com/carts/3",
					"protocol": "https",
					"host": [
						"fakestoreapi",
						"com"
					],
					"path": [
						"carts",
						"3"
					]
				}
			},
			"response": []
		}
	]
}